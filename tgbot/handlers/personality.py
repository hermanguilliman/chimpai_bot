from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram_dialog import DialogManager
from aiogram_dialog.widgets.input import MessageInput

from tgbot.misc.states import NewPersonality, PersonalitySettings
from tgbot.services.repository import Repo


async def new_personality_name(
    message: Message, message_input: MessageInput, manager: DialogManager
):
    user_id = manager.bg()._event_context.user.id
    repo: Repo = manager.middleware_data.get("repo")
    new_name = message.text
    is_exists = await repo.is_custom_personality_exists(
        user_id=user_id, name=new_name
    )

    if is_exists:
        await message.answer(
            f"‚õîÔ∏è <b>{new_name}</b> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è! ‚õîÔ∏è",
            parse_mode=ParseMode.HTML,
        )
        return

    if len(new_name) > 20:
        await message.answer(
            "‚ùóÔ∏è –û—à–∏–±–∫–∞! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ 20 –∑–Ω–∞–∫–æ–≤!",
            parse_mode=ParseMode.HTML,
        )
        return

    manager.dialog_data["name"] = new_name
    await manager.switch_to(NewPersonality.text)


async def new_personality_text(
    message: Message, message_input: MessageInput, manager: DialogManager
):
    user_id = manager.bg()._event_context.user.id
    repo: Repo = manager.middleware_data.get("repo")

    name = manager.dialog_data.get("name")
    text = message.text

    await repo.add_custom_personality(user_id=user_id, name=name, text=text)
    await message.answer(
        f'üëå –õ–∏—á–Ω–æ—Å—Ç—å "<b>{name}</b>" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!',
        parse_mode=ParseMode.HTML,
    )
    await manager.done()
    return


async def update_personality_text(
    message: Message, message_input: MessageInput, manager: DialogManager
):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏"""
    user_id = manager.bg()._event_context.user.id
    repo: Repo = manager.middleware_data.get("repo")
    name = manager.dialog_data.get("custom_name")
    new_text = message.text
    await repo.update_personality_text(
        user_id=user_id, name=name, new_text=new_text
    )
    await message.answer(
        f'üëå –û–ø–∏—Å–∞–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ "<b>{name}</b>" —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!',
        parse_mode=ParseMode.HTML,
    )
    await manager.switch_to(PersonalitySettings.custom_person_select)


async def update_personality_name(
    message: Message, message_input: MessageInput, manager: DialogManager
):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–º—è –ª–∏—á–Ω–æ—Å—Ç–∏"""
    user_id = manager.bg()._event_context.user.id
    repo: Repo = manager.middleware_data.get("repo")
    name = manager.dialog_data.get("custom_name")
    new_name = message.text
    is_exists = await repo.is_custom_personality_exists(
        user_id=user_id, name=new_name
    )
    if name == new_name:
        await message.answer(
            f"‚ö†Ô∏è <b>–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å {name} –Ω–∞ {new_name}? –≠—Ç–æ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –∏–º—è!</b>",
            parse_mode=ParseMode.HTML,
        )
        return
    if is_exists:
        await message.answer(
            f"‚õîÔ∏è <b>{new_name}</b> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è! ‚õîÔ∏è",
            parse_mode=ParseMode.HTML,
        )
        return

    if len(new_name) > 20:
        await message.answer(
            "‚ùóÔ∏è –û—à–∏–±–∫–∞! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ 20 –∑–Ω–∞–∫–æ–≤!",
            parse_mode=ParseMode.HTML,
        )
        return

    await repo.update_personality_name(
        user_id=user_id, name=name, new_name=new_name
    )
    await message.answer(
        f'üëå –õ–∏—á–Ω–æ—Å—Ç—å "<b>{name}</b>" –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –Ω–∞ "<b>{new_name}</b>"!',
        parse_mode=ParseMode.HTML,
    )
    manager.dialog_data["custom_name"] = new_name
    await manager.switch_to(PersonalitySettings.custom_person_select)
