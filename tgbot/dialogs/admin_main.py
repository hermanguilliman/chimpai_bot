from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram_dialog import Dialog, Window, Dialog, DialogManager
from aiogram_dialog.widgets.text import Format, Const
from aiogram_dialog.widgets.kbd import Button, Row, SwitchTo, Back
from aiogram_dialog.widgets.input import MessageInput
from tgbot.models.aisettings import AISettings
from tgbot.services.repository import Repo
from tgbot.dialogs.openai_settings import Settings
from aiogram.types import CallbackQuery, ContentType, Message, ChatActions, ParseMode
from loguru import logger

class Main(StatesGroup):
    main = State()
    neural = State()


async def neural_handler(
    message: Message,
    message_input: MessageInput,
    manager: DialogManager):
    repo: Repo = manager.data['repo']
    openai = manager.data['openai']
    settings: AISettings = await repo.get_user_settings(message.from_id)
    await message.answer_chat_action(ChatActions.TYPING)
    try:
        if settings is not None:
            logger.debug('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏')
            ai_text_answer = await openai.get_answer(
                api_key=settings.api_key,
                max_tokens=settings.max_tokens,
                model=settings.model,
                temperature=settings.temperature,
                prompt=message.text,
                )
        else:
            await message.answer('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å /start')

        if ai_text_answer is not None:
            """–≤—ã–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
            await message.reply(ai_text_answer)
        else:
            await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç AI –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ')
    
    except:
        logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞!')
    

async def show_settings(callback: CallbackQuery, button: Button,
                    manager: DialogManager):
    """ –°—Ç–∞—Ä—Ç—É–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    data = manager.current_context().dialog_data
    await manager.start(Settings.select, data=data)


async def get_main_data(repo: Repo, dialog_manager: DialogManager, **kwargs) -> dict:
    # –ó–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—É—Å—Ç–∏–≤—à–µ–π –¥–∏–∞–ª–æ–≥ –∏ –±–¥ 
    start_data = dialog_manager.current_context().start_data
    user_id:int = start_data.get('user_id')
    full_name:str = start_data.get('full_name')
    settings: AISettings = await repo.get_user_settings(user_id)

    base_view:dict = {
        'user_id': user_id,
        'full_name': full_name,
        'api_key': '...' + settings.api_key[-10:] if settings.api_key else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
        'model': settings.model if settings.model else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
        'max_length': settings.max_tokens if settings.max_tokens else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
        'temperature': settings.temperature if settings.temperature else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
    }

    # –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç?
    dialog_manager.current_context().dialog_data.update(base_view)
    return base_view


main_dialog = Dialog(
    Window(
        # –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        Const("<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - ChimpAI üêµ v0.2</b>\n"),
        # –µ—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        Format("[–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä]"),
        Row(                
            SwitchTo(Const("ü§ñ –ù–µ–π—Ä–æ-—á–∞—Ç"), id='neural', state=Main.neural),
            Button(Const("üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã"), id='settings', on_click=show_settings),
        ),
        state=Main.main,
        getter=get_main_data,
        parse_mode=ParseMode.HTML,
        preview_data={
            'full_name':'–±—Ä–∞—Ç–∏–∫',
        }
    ),
    Window(
        MessageInput(neural_handler, content_types=[ContentType.TEXT]),

        Const("<b>ü§ñ –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:</b>"),
        Back(Const('‚Ü©Ô∏è –ù–∞–∑–∞–¥')),
        state=Main.neural,
        parse_mode=ParseMode.HTML,
    )
)