from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from typing import Any

from aiogram_dialog import Dialog, DialogManager, Window, ChatEvent, Data
from aiogram_dialog.widgets.text import Format, Const
from aiogram_dialog.widgets.kbd import Button, Next, Cancel, Back, Row, Start, Select, SwitchTo, Column, Group
from aiogram_dialog.widgets.input import MessageInput
from tgbot.models.aisettings import AISettings
from tgbot.services.repository import Repo
from tgbot.services.openai import OpenAIService


class Main(StatesGroup):
    main = State()


class Settings(StatesGroup):
    select = State()
    model = State()
    max_length = State()
    temperature = State()


async def show_settings(callback: CallbackQuery, button: Button,
                    manager: DialogManager):
    """ –°—Ç–∞—Ä—Ç—É–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    await manager.start(Settings.select, data=manager.current_context().data)


async def on_max_length_selected(callback: ChatEvent, select: Any,
                         manager: DialogManager,
                         item_id: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏"""
    repo: Repo = manager.data['repo']
    user_id = manager.current_context().start_data['user_id']
    await repo.update_user_max_tokens(user_id=user_id, max_tokens=item_id)
    await manager.done()


async def get_model_selector(openai: OpenAIService, dialog_manager: DialogManager, **kwargs):
    engines = await openai.get_engines()
    return [
        {'engines': engines,}
    ]

async def get_main_data(repo: Repo, dialog_manager: DialogManager, **kwargs):
    data = dialog_manager.current_context().start_data
    settings: AISettings = await repo.get_user_settings(data.get('user_id'))
    # –∫–∞–∫–æ–π —Ç–æ –∫–æ—Å—Ç—ã–ª—å –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–¥
    if data.get('new_model'):
        print('got new model', data.get('new_model'))
        # await repo.update_model(data.get('user_id'), data.get('new_model'))
    if data.get('new_max_length'):
        print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è —Ö—É–π–Ω—è:", data)
        # await repo.update_model(data.get('user_id'), data.get('new_max_length'))
    if data.get('new_temperature'):
        print(data.get('new_temperature'))
        # await repo.update_model(data.get('user_id'), data.get('new_temperature'))


    base = {
        'full_name': data.get('full_name'),
        'model': settings.model,
        'max_length': settings.max_tokens,
        'temperature': settings.temperature,
    }
    return base

# –ì–ª–∞–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
main_dialog = Dialog(
    Window(
        # –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        Const("<b>ChimpAI [beta]</b>\n"),
        Format("–ü—Ä–∏–≤–µ—Ç, <b>{full_name}</b>!\n", when='full_name'),
        Format("–ê–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å: {model}", when='model'),
        Format("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {max_length}", when='max_length'),
        Format("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}", when='temperature'),
        # Start(Const("üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), id='settings', state=Settings.select, data="user_id"),
        Button(Const("üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), id='settings', on_click=show_settings),
        state=Main.main,
        getter=get_main_data,
        parse_mode='HTML',
        preview_data={
            'full_name':'–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü',
        }
    ),
)

# –î–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings_dialog = Dialog(
    Window(
        # –û–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        Const('<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–µ–ª–∏ –±—ã –∏–∑–º–µ–Ω–∏—Ç—å:</b>'),
        Row(
        SwitchTo(Const('ü§ñ –ú–æ–¥–µ–ª—å'), id='set_model', state=Settings.model),
        SwitchTo(Const('üìè –î–ª–∏–Ω–∞'), id='set_max_length', state=Settings.max_length),
        SwitchTo(Const('üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'), id='set_temperature', state=Settings.temperature),
        ),
        Cancel(Const('üôä –û—Ç–º–µ–Ω–∞')),
        state=Settings.select,
        parse_mode='HTML',

    ),
    Window(
        # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        Const("<b>–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞:</b>"),

        Cancel(Const('üôä –û—Ç–º–µ–Ω–∞')),
        state=Settings.model,
        parse_mode='HTML',
    ),
    Window(
        # –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å,
        # –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
        # –Ω–∞–ø—Ä–∏–º–µ—Ä –æ—Ç 1 –¥–æ 4000 –¥–ª—è –º–æ–¥–µ–ª–∏ text-davinci-003
        Const("<b>–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Ç–æ–∫–µ–Ω–æ–≤ —Ä–∞—Å—Ö–æ–¥—É–µ–º–æ–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:</b>"),
        Group(
            Select(
                Format("{item}"),
                items=list(range(0, 4000+1, 100)),
                item_id_getter=lambda x: x,
                id='select_max_length',
                on_click=on_max_length_selected,
            ),
            width=5,
        ),
        Cancel(Const('üôä –û—Ç–º–µ–Ω–∞')),
        state=Settings.max_length,
        parse_mode='HTML',
    ),
    Window(
        # –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã 
        # –æ—Ç 0.00 –¥–æ 1.00 —Å –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        Const("–£–∫–∞–∂–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É"),
        Cancel(Const('üôä –û—Ç–º–µ–Ω–∞')),
        state=Settings.temperature,
        parse_mode='HTML',
    ),
)