from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, ContentType, ParseMode
from typing import Any
from decimal import Decimal
from aiogram_dialog import Dialog, DialogManager, Window, ChatEvent, Data
from aiogram_dialog.widgets.text import Format, Const
from aiogram_dialog.widgets.kbd import Button, Cancel, Select, SwitchTo, Group
from aiogram_dialog.widgets.input import MessageInput
from tgbot.models.aisettings import AISettings
from tgbot.services.repository import Repo
from tgbot.services.openai import OpenAIService


class Settings(StatesGroup):
    select = State()
    api_key = State()
    model = State()
    max_length = State()
    temperature = State()

async def api_key_handler(message: Message, message_input: MessageInput,
                       manager: DialogManager):

    user_id = manager.current_context().start_data['user_id']
    repo: Repo = manager.data['repo']
    dialog_data = manager.current_context().dialog_data
    new_api_key = message.text
    if len(new_api_key) != 51:
        await message.answer(
            f'‚õîÔ∏è <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ API –∫–ª—é—á–∞!</b> ‚õîÔ∏è\n–ö–ª—é—á –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 51 –∑–Ω–∞–∫–∞ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å sk-...',
            parse_mode=ParseMode.HTML)
        await manager.done()
        return
        
    dialog_data["api_key"] = new_api_key
    await repo.update_user_api_key(user_id, new_api_key)
    await message.answer(f'<b>–ù–æ–≤—ã–π API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>', parse_mode=ParseMode.HTML)
    await manager.done()


async def on_new_model_selected(callback: ChatEvent, select: Any,
                         manager: DialogManager,
                         item_id: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ –±–¥ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏"""
    repo: Repo = manager.data['repo']
    user_id = manager.current_context().start_data['user_id']
    await repo.update_user_settings_model(user_id=user_id, model=item_id)
    await callback.answer(f'–ú–æ–¥–µ–ª—å {item_id} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!')
    await manager.done()


async def on_max_length_selected(callback: ChatEvent, select: Any,
                         manager: DialogManager,
                         item_id: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏"""
    repo: Repo = manager.data['repo']
    user_id = manager.current_context().start_data['user_id']
    await repo.update_user_max_tokens(user_id=user_id, max_tokens=item_id)
    await callback.answer(f'–ù–æ–≤–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {item_id} —Ç–æ–∫–µ–Ω–æ–≤')
    await manager.done()


async def get_data_model_selector(openai: OpenAIService, dialog_manager: DialogManager, **kwargs):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ OpenAI
    engines = await openai.get_engines()
    engine_ids = [engine['id'] for engine in engines['data']]
    return {
        'models': engine_ids,
    }

async def on_temperature_selected(callback: ChatEvent, select: Any,
                         manager: DialogManager):
    repo: Repo = manager.data['repo']
    user_id = manager.current_context().start_data['user_id']
    temperature = manager.current_context().dialog_data.get('temperature')
    await repo.update_temperature(user_id=user_id, temperature=str(temperature))
    await callback.answer(f'–ó–∞–¥–∞–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}')
    await manager.done()


# –ì–µ—Ç—Ç–µ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
async def temp_getter(dialog_manager: DialogManager, **kwargs):
    # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞?
    dialog_data = dialog_manager.current_context().dialog_data
    if len(dialog_data)==0:
        dialog_manager.current_context().dialog_data.update(dialog_manager.current_context().start_data)
    return dialog_data
    

# –∫–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
async def on_reset_temp(callback: CallbackQuery, button: Button,
                   manager: DialogManager):
    manager.current_context().dialog_data["temperature"] = '0.7'

# –∫–Ω–æ–ø–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
async def on_increase_temp(callback: CallbackQuery, button: Button,
                   manager: DialogManager):
    maximum = Decimal('1.0')
    counter = Decimal(manager.current_context().dialog_data.get("temperature"))
    if counter >= maximum:
        await callback.answer('–ë–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è!')
    else:
        manager.current_context().dialog_data["temperature"] = str(counter + Decimal('0.1'))

# –∫–Ω–æ–ø–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
async def on_decrease_temp(callback: CallbackQuery, button: Button,
                   manager: DialogManager):
    minimal = Decimal('0')
    counter = Decimal(manager.current_context().dialog_data.get("temperature"))
    if counter <= minimal:
        await callback.answer('–ú–µ–Ω—å—à–µ –Ω–µ–ª—å–∑—è!')
    else:
        manager.current_context().dialog_data["temperature"] = str(counter - Decimal('0.1'))


async def main_settings_getter(dialog_manager: DialogManager, **kwargs):
    dialog_manager.current_context().dialog_data.update(dialog_manager.current_context().start_data)
    return dialog_manager.current_context().dialog_data


# –î–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings_dialog = Dialog(
    Window(
        # –û–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        Const('<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–µ–ª–∏ –±—ã –∏–∑–º–µ–Ω–∏—Ç—å:</b>'),
        Group(
        SwitchTo(Format('üîë API –∫–ª—é—á: {api_key}'), id='set_api_key', state=Settings.api_key, when='api_key'),
        SwitchTo(Format('ü§ñ –ú–æ–¥–µ–ª—å: {model}'), id='set_model', state=Settings.model, when='model'),
        SwitchTo(Format('üîã –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {max_length}'), id='set_max_length', state=Settings.max_length, when='max_length'),
        SwitchTo(Format('üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temperature}'), id='set_temperature', state=Settings.temperature, when='temperature'),
        width=1),
        Cancel(Const('ü§ö –û—Ç–º–µ–Ω–∞')),
        state=Settings.select,
        parse_mode=ParseMode.HTML,
        getter=main_settings_getter,
    ),
    Window(
        # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        MessageInput(api_key_handler, content_types=[ContentType.TEXT]),
        Const("<b>–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π API –∫–ª—é—á:</b>"),
        Cancel(Const('ü§ö –û—Ç–º–µ–Ω–∞')),
        state=Settings.api_key,
        parse_mode=ParseMode.HTML,
    ),
    Window(
        # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        Const("<b>–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞:</b>"),
        Group(
            Select(
                Format("ü§ñ {item}"),
                # –Ω—É–∂–Ω–æ –∫–∏–Ω—É—Ç—å —Å—é–¥–∞ —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
                items='models',
                item_id_getter=lambda x: x,
                id='select_max_new_model',
                on_click=on_new_model_selected,
            ),
            width=1,
        ),
        Cancel(Const('ü§ö –û—Ç–º–µ–Ω–∞')),
        state=Settings.model,
        parse_mode=ParseMode.HTML,
        getter=get_data_model_selector,
    ),
    Window(
        # –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å,
        # –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
        # –Ω–∞–ø—Ä–∏–º–µ—Ä –æ—Ç 1 –¥–æ 4000 –¥–ª—è –º–æ–¥–µ–ª–∏ text-davinci-003
        Const("<b>–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Ç–æ–∫–µ–Ω–æ–≤ —Ä–∞—Å—Ö–æ–¥—É–µ–º–æ–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:</b>"),
        Group(
            Select(
                Format("üîã {item}"),
                items=list(range(100, 4000+1, 100)),
                item_id_getter=lambda x: x,
                id='select_max_length',
                on_click=on_max_length_selected,
            ),
            width=5,
        ),
        Cancel(Const('ü§ö –û—Ç–º–µ–Ω–∞')),
        state=Settings.max_length,
        parse_mode=ParseMode.HTML,
    ),
    Window(
        # –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã 
        # –æ—Ç 0.00 –¥–æ 1.00 —Å –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        Const("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –≥—Ä–∞–¥—É—Å–Ω–∏–∫, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä. \n–î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç 0.0 –¥–æ 1.0"),
        Group(
            Button(Format('üå° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ: {temperature}'), id='new_temperature', when='temperature', on_click=on_temperature_selected),
            width=1,
        ),
        Group(
            Button(Const('üîª 0.1'), id='decrease', on_click=on_decrease_temp),
            Button(Const('0.1 üî∫'), id='increase', on_click=on_increase_temp),
            width=2,
        ),
        Group(
            Button(Const('üåö –ö–∞–∫ –±—ã–ª–æ'), id='reset_temp', on_click=on_reset_temp),
            Cancel(Const('ü§ö –û—Ç–º–µ–Ω–∞')),
            width=2,
            
        ),
        state=Settings.temperature,
        parse_mode=ParseMode.HTML,
        getter=temp_getter,
    ),
)