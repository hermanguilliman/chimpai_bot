from aiogram.enums import ContentType, ParseMode
from aiogram_dialog import Dialog, Window
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.kbd import Cancel, Row, Start
from aiogram_dialog.widgets.text import Const, Format

from tgbot.getters.base_data import get_base_data
from tgbot.handlers.images import image_creator_handler
from tgbot.handlers.neural_chat import neural_handler
from tgbot.handlers.tts import tts_handler
from tgbot.handlers.transcription import voice_handler
from tgbot.handlers.voice_chatgpt import voice_to_chatgpt_handler
from tgbot.misc.states import Neural, ChatSettings, TTSSettings

neural_chat = Dialog(
    Window(
        Const("<b>üñ• –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–∞—Ç–∞:</b>\n"),

        Format(
            "ü§ñ –ú–æ–¥–µ–ª—å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: <b>{model}</b>",
            when="model"
        ),

        Format(
            "üîã –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: <b>{max_length}</b> —Ç–æ–∫–µ–Ω–æ–≤",
            when="max_length"
        ),

        Format(
            "üß† –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞: <b>{temperature}</b>",
            when="temperature"
        ),

        Format(
            "üé≠ –õ–∏—á–Ω–æ—Å—Ç—å: <b>{personality}</b>",
            when="personality"
        ),

        Const("\n<b>–ó–∞–¥–∞–π –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º üòé</b>"),

        # –ò–Ω–ø—É—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞
        MessageInput(
            voice_to_chatgpt_handler,
            content_types=[ContentType.VOICE]),

        # –ò–Ω–ø—É—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞
        MessageInput(
            neural_handler,
            content_types=[ContentType.TEXT]),

        Row(
            Cancel(
                Const("üëà –ù–∞–∑–∞–¥")),
            Start(
                Const("üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞"),
                id="settings",
                state=ChatSettings.select),
        ),
        state=Neural.chat,
        parse_mode=ParseMode.HTML,
        getter=get_base_data,
    ),
    Window(
        MessageInput(
            voice_handler,
            content_types=[ContentType.VOICE]
        ),
        Const("<b>üéß –Ø –º–æ–≥—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –ª—é–±–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>\n"),
        Const("<b>–ó–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üòÄ</b>\n"),
        Cancel(Const("üëà –ù–∞–∑–∞–¥")),
        state=Neural.transcribe,
        parse_mode=ParseMode.HTML,
    ),
    Window(
        MessageInput(image_creator_handler, content_types=[ContentType.TEXT]),
        Const("<b>üñå DALL-E —ç—Ç–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π üòé</b>\n"),
        Const("<b>–û–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞ —è –µ–≥–æ –Ω–∞—Ä–∏—Å—É—é!üòâ\n</b>"),
        Cancel(Const("üëà –ù–∞–∑–∞–¥")),
        state=Neural.image_create,
        parse_mode=ParseMode.HTML,
    ),
    Window(
        MessageInput(tts_handler, content_types=[ContentType.TEXT]),
        Const("<b>üó£ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è TTS (Text to Speech) –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ.\n</b>"),
        Const("<b>–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞:</b>"),
        Format("<b>–ì–æ–ª–æ—Å: {tts_voice}</b>"),
        Format("<b>–°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è: {tts_speed}</b>\n"),
        Const("<b>ü¶ú –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–∑–≤—É—á–∏—Ç—å!\n</b>"),
        Row(
            Cancel(Const("üëà –ù–∞–∑–∞–¥")),
            Start(
                Const("üìù–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞"),
                id="voice_settings",
                state=TTSSettings.select
                ),
        ),
        getter=get_base_data,
        state=Neural.tts,
        parse_mode=ParseMode.HTML,
    ),
)
